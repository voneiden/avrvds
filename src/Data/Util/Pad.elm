-- Do not edit!
-- This file was generated by elm_type_boiler

module Data.Util.Pad exposing (..)
import Data.ChipTypes exposing (Pad(..))
import Json.Decode as Decode exposing (Decoder)
list : List Pad
list =
    [VDD
    ,GND
    ,PA0
    ,PA1
    ,PA2
    ,PA3
    ,PA4
    ,PA5
    ,PA6
    ,PA7
    ,PB0
    ,PB1
    ,PB2
    ,PB3
    ,PB4
    ,PB5
    ,PB6
    ,PB7
    ]


toString : Pad -> String
toString pad =
    case pad of
        VDD -> "VDD"
        GND -> "GND"
        PA0 -> "PA0"
        PA1 -> "PA1"
        PA2 -> "PA2"
        PA3 -> "PA3"
        PA4 -> "PA4"
        PA5 -> "PA5"
        PA6 -> "PA6"
        PA7 -> "PA7"
        PB0 -> "PB0"
        PB1 -> "PB1"
        PB2 -> "PB2"
        PB3 -> "PB3"
        PB4 -> "PB4"
        PB5 -> "PB5"
        PB6 -> "PB6"
        PB7 -> "PB7"


fromString : String -> Maybe Pad
fromString pad =
    case pad of
        "VDD" -> Just VDD
        "GND" -> Just GND
        "PA0" -> Just PA0
        "PA1" -> Just PA1
        "PA2" -> Just PA2
        "PA3" -> Just PA3
        "PA4" -> Just PA4
        "PA5" -> Just PA5
        "PA6" -> Just PA6
        "PA7" -> Just PA7
        "PB0" -> Just PB0
        "PB1" -> Just PB1
        "PB2" -> Just PB2
        "PB3" -> Just PB3
        "PB4" -> Just PB4
        "PB5" -> Just PB5
        "PB6" -> Just PB6
        "PB7" -> Just PB7
        _ -> Nothing


decode : String -> Decoder Pad
decode pad =
    case fromString pad of
        Just pad_ -> Decode.succeed pad_
        Nothing -> Decode.fail <| "Unsupported pad: " ++ pad

